openapi: 3.0.1
info:
  title: Сервис "Виртуальная школа"
  version: v0.r1
servers:
  - url: http://localhost:8080
    description: Сервер приложения Virtual-School
paths:
  /teacher:
    get:
      description: Получение учителя
      tags:
        - teacher
      operationId: getAllTeachers
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TeacherEntity'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'
      security:
        - orderAuth: [ ]
    post:
      description: Создание учителя
      tags:
        - teacher
      operationId: createTeacher
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TeacherDto'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeacherEntity'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'
      security:
        - orderAuth: [ ]
  /teacher/{teacherId}/activate:
    description: Изменение статуса учителя на "готов к работе"
    put:
      tags:
        - teacher
      operationId: activateTeacher
      parameters:
        - $ref: '#/components/parameters/teacherId'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeacherEntity'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'
      security:
        - orderAuth: [ ]
  /teacher/deactivate:
    put:
      description: Изменение статуса учителя на "не готов к работе"
      tags:
        - teacher
      operationId: deactivateTeacher
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeactivateDto'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeacherEntity'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'
      security:
        - orderAuth: [ ]
  /school-class:
    get:
      description: Получение списка всех школьных классов
      tags:
        - SchoolClass
      operationId: getAllSchoolClasses
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SchoolClassEntity'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'
      security:
        - orderAuth: [ ]
    post:
      description: Создание нового класса
      tags:
        - SchoolClass
      operationId: createSchoolClass
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SchoolClassDTO'
        required: true
      responses:
        201:
          description: CREATED
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'
      security:
        - orderAuth: [ ]
    delete:
      description: Удаление существующего класса
      tags:
        - SchoolClass
      operationId: deleteSchoolClass
      responses:
        200:
          description: OK
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'
      security:
        - orderAuth: [ ]
  /school-class/{id}:
    get:
      description: Получить школьный класс по идентификатору
      tags:
        - SchoolClass
      operationId: getSchoolClassById
      parameters:
        - $ref: '#/components/parameters/schoolClassId'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SchoolClassEntity'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'
      security:
        - orderAuth: [ ]
    post:
      description: Добавление ученика в школьный класс
      tags:
        - SchoolClass
      operationId: addStudentToClass
      parameters:
        - $ref: '#/components/parameters/schoolClassId'
        - $ref: '#/components/parameters/Id'
      responses:
        200:
          description: OK
          content:
            'application/json':
              schema:
                type: object
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'
      security:
        - orderAuth: [ ]
    delete:
      description: Удаление ученика из школьного класса
      tags:
        - SchoolClass
      operationId: removeStudentFromClass
      parameters:
        - $ref: '#/components/parameters/schoolClassId'
        - $ref: '#/components/parameters/Id'
      responses:
        200:
          description: OK
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'
      security:
        - orderAuth: [ ]
  /student/change-snils:
    put:
      description: Изменения данных СНИЛС
      tags:
        - student
      operationId: changeSnilsStudent
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StudentDto'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StudentEntity'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'
      security:
        - orderAuth: [ ]
  /student/change-birthcertificate:
    put:
      description: Изменение данных свидетельства о рождении
      tags:
        - student
      operationId: changeBirthCertificateStudent
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StudentDto'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StudentEntity'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'
      security:
        - orderAuth: [ ]

  /student/add-passport:
    put:
      description: добавление паспорта ученику достигшему возраста 14 лет
      tags:
        - student
      operationId: addPassportStudent
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StudentDto'
        required: true
      responses:
        201:
          description: OK
          content:
            application/json:
              schema:
                type: string
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'
      security:
        - orderAuth: [ ]
  /student:
    post:
      tags:
        - student
      description: Добавление нового ученика в список школы
      operationId: addStudent
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StudentDto'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StudentEntity'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'
      security:
        - orderAuth: [ ]
  /student/{studentId}:
    delete:
      tags:
        - student
      description: Удаление ученика по идентификатору
      operationId: deleteStudent
      parameters:
        - $ref: '#/components/parameters/studentId'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StudentEntity'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'
      security:
        - orderAuth: [ ]
  /schedule:
    put:
      tags:
        - schedule
      description: Добавление расписания для всех классов на один день
      operationId: createSchoolScheduleForDate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScheduleForDateDTO'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'
      security:
        - orderAuth: [ ]
    get:
      tags:
        - schedule
      description: Получить расписание для всех классов за определенный период
      operationId: getSchoolScheduleForSelectedPeriod
      parameters:
        - name: dateStart
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/Date'
        - name: dateEnd
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/Date'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ScheduleForDateDTO'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'
      security:
        - orderAuth: [ ]
  /schedule/lesson:
    put:
      tags:
        - schedule
      description: Выставить урок в расписание
      operationId: putLessonInSchedule
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutLessonDTO'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'
      security:
        - orderAuth: [ ]
  /schedule/{id}/{date}:
    get:
      tags:
        - schedule
      description: Получить расписание уроков на заданную дату для заданного класса
      operationId: getLessonsInScheduleForSchoolClass
      parameters:
        - $ref: '#/components/parameters/schoolClassId'
        - $ref: '#/components/parameters/Date'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SchoolDayForClassDTO'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'
      security:
        - orderAuth: [ ]
  /schedule/{date}:
    get:
      tags:
        - schedule
      description: Получить расписание уроков на заданную дату для всех классов
      operationId: getSchoolScheduleForDate
      parameters:
        - $ref: '#/components/parameters/Date'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScheduleForDateDTO'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'
      security:
        - orderAuth: [ ]
  /schedule/check-status:
    get:
      tags:
        - schedule
      description: Получить статус проведения урока
      operationId: getLessonStatus
      parameters:
        - name: date
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/Date'
        - name: schoolClassId
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/Id'
        - name: discipline
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/Discipline'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: boolean
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'
      security:
        - orderAuth: [ ]
  /schedule/lesson/cancel/{date}:
    delete:
      tags:
        - schedule
      description: Отмена уроков во всех классах на заданную дату.
      operationId: cancelAllLessonsForDate
      parameters:
        - $ref: '#/components/parameters/Date'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'
      security:
        - orderAuth: [ ]
  /schedule/lesson/cancel:
    delete:
      tags:
        - schedule
      description: Отмена урока
      operationId: cancelLessonInSchoolClass
      parameters:
        - name: schoolClassId
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/Id'
        - name: schoolDate
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/Date'
        - name: lessonNumber
          in: query
          required: true
          schema:
            type: integer
            format: int32
            example: 2
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'
      security:
        - orderAuth: [ ]
  /journal/discipline/{studentId}/:
    get:
      tags:
        - journal-of-student
      description: |
        Добавить в общий журнал успеваемости ученика
        журнал успеваемости по конкретной дисциплине
      operationId: getAllJournalsForStudentByDiscipline
      parameters:
        - $ref: '#/components/parameters/studentId'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AllDisciplinesOfStudentResponseDto'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'
      security:
        - orderAuth: [ ]
  /journal/discipline/achievement/{studentId}/{dateOfLesson}/:
    get:
      tags:
        - journal-of-student
      description: Получить отметку об успеваемости ученика по данной дисциплине по дате урока
      operationId: getJournalForStudentByDiscipline
      parameters:
        - $ref: '#/components/parameters/studentId'
        - name: dateOfLesson
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/Date'
        - $ref: '#/components/parameters/Discipline'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AchievementOfStudentResponseDto'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'
      security:
        - orderAuth: [ ]
  /journal/discipline/achievement/{studentId}/:
    get:
      tags:
        - journal-of-student
      description: Получить все отметки об успеваемости ученика по данной дисциплине
      operationId: getJournalForStudentByDiscipline_1
      parameters:
        - $ref: '#/components/parameters/studentId'
        - $ref: '#/components/parameters/Discipline'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AllAchievementsOfStudentByDisciplineResponseDto'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'
      security:
        - orderAuth: [ ]
  /journal/discipline/{studentId}:
    delete:
      tags:
        - journal-of-student
      description: |
        Удалить из журнала общей успеваемости ученика
        журнал успеваемости по конкретной дисциплине
      operationId: deleteJournalForStudentByDiscipline
      parameters:
        - $ref: '#/components/parameters/studentId'
        - $ref: '#/components/parameters/Discipline'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'
      security:
        - orderAuth: [ ]
  /journal/{studentId}/:
    post:
      tags:
        - journal-of-student
      description: Создать новый журнал общей успеваемости ученика
      operationId: createNewJournalForStudent
      parameters:
        - $ref: '#/components/parameters/studentId'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'
      security:
        - orderAuth: [ ]
    delete:
      tags:
        - journal-of-student
      description: Удалить журнал общей успеваемости
      operationId: deleteJournalForStudent
      parameters:
        - $ref: '#/components/parameters/studentId'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'
      security:
        - orderAuth: [ ]
  /journal/discipline/:
    post:
      tags:
        - journal-of-student
      description: |
        Добавить в журнал общей успеваемости ученика
        журнал успеваемости по конкретной дисциплине
      operationId: addJournalForStudentByDiscipline
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddJournalByDisciplineForStudentRequestDto'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'
      security:
        - orderAuth: [ ]
  /journal/discipline/achievement/{studentId}:
    put:
      tags:
        - journal-of-student
      description: Изменить отметку об успеваемости ученика
      operationId: changeAchievementForStudent
      parameters:
        - $ref: '#/components/parameters/studentId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AchievementForStudentDtoRequest'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'
      security:
        - orderAuth: [ ]
    post:
      tags:
        - journal-of-student
      description: Выставить отметку студенту
      operationId: addAchievementForStudent
      parameters:
        - $ref: '#/components/parameters/studentId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AchievementForStudentDtoRequest'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'
      security:
        - orderAuth: [ ]
    patch:
      tags:
        - journal-of-student
      description: Удалить отметку студента
      operationId: deleteAchievementForStudent
      parameters:
        - $ref: '#/components/parameters/studentId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AchievementForStudentDtoRequest'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'
      security:
        - orderAuth: [ ]
  /homework/{id}:
    get:
      tags:
        - loaded-homework
      description: Получить выполненное домашнее задание для проверки
      operationId: getCompletedHomework
      parameters:
        - $ref: '#/components/parameters/HomeWorkId'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoadedHomeworkDto'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'
      security:
        - orderAuth: [ ]
  /homework-for-class/{id}:
    get:
      tags:
        - homework-for-class
      description: узнать(получить) домашнее задание
      operationId: getHomeworkForClass
      parameters:
        - $ref: '#/components/parameters/HomeWorkId'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HomeworkForClassDto'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'
      security:
        - orderAuth: [ ]
  /homework-for-class:
    post:
      tags:
        - homework-for-class
      description: Задать домашнее задание для всего класса
      operationId: addHomeworkForClass
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HomeworkForClassDto'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: string
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'
      security:
        - orderAuth: [ ]
  /homework:
    post:
      tags:
        - loaded-homework
      description: Отправить сделанное домашнее задание
      operationId: sendCompletedHomework
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoadedHomeworkDto'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: string
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'
      security:
        - orderAuth: [ ]
components:
  securitySchemes:
    orderAuth:
      type: http
      scheme: basic
  responses:
    UnauthorizedError:
      description: Аутентификация не пройдена
      headers:
        WWW_Authenticate:
          schema:
            $ref: '#/components/schemas/Problem'
    BadRequest:
      description: Неверные входные данные
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/Problem'
    InternalServerError:
      description: Ошибка сервера.
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/Problem'
    NotFound:
      description: Заказ не найден
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/Problem'
    Conflict:
      description: Ошибка изменения состояния.
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/Problem'
  parameters:
    Date:
      name: date
      in: path
      required: true
      schema:
        $ref: '#/components/schemas/Date'
    teacherId:
      name: teacherId
      in: path
      required: true
      description: id учителя
      example: 1
      schema:
        type: integer
        format: int64
    schoolClassId:
      name: id
      in: path
      required: true
      schema:
        description: Идентификатор школьного класса
        type: integer
        format: int64
        example: 15
    studentId:
      name: studentId
      in: path
      required: true
      schema:
        type: integer
        format: int64
        description: Идентификатор ученика
        example: 1
    Id:
      name: studentId
      in: query
      required: true
      schema:
        type: integer
        format: int64
        description: Идентификатор ученика
        example: 1
    Discipline:
      name: discipline
      in: query
      required: true
      description: название предмета
      example: Русский язык
      schema:
        type: string
    HomeWorkId:
      name: id
      in: path
      required: true
      description: id домашнего задания для класса
      example: 1
      schema:
        type: integer
        format: int64
  schemas:
    Id:
      type: integer
      description: идентификатор
      format: int64
      example: 1
    TeacherEntity:
      type: object
      description: сущность преподавателя
      properties:
        id:
          $ref: '#/components/schemas/Id'
        standingYears:
          $ref: '#/components/schemas/StandingYears'
        fullName:
          type: string
          example: Иванов Иван Иванович
        passport:
          type: string
          example: 7809 542478
        snils:
          type: string
          example: 0978 209684
        active:
          type: boolean
          example: true
    DeactivateDto:
      type: object
      description: ДТО деактивации учителя
      properties:
        teacherId:
          $ref: '#/components/schemas/Id'
        from:
          $ref: '#/components/schemas/Date'
        to:
          $ref: '#/components/schemas/Date'
    SchoolClassDTO:
      type: object
      description: ДТО школьного класса
      properties:
        schoolClassId:
          $ref: '#/components/schemas/Id'
        parallel:
          $ref: '#/components/schemas/Parallel'
        litera:
          $ref: '#/components/schemas/Litera'
        studentIds:
          description: Список объектов идентификаторов студента
          type: array
          items:
            $ref: '#/components/schemas/StudentId'
    SchoolClassEntity:
      type: object
      description: сущность школьного класса
      properties:
        id:
          $ref: '#/components/schemas/Id'
        parallel:
          $ref: '#/components/schemas/Parallel'
        litera:
          $ref: '#/components/schemas/Litera'
    StudentId:
      type: object
      description: идентификатор студета
      properties:
        value:
          $ref: '#/components/schemas/Id'
    Parallel:
      description: Параллель (1-11)
      type: integer
      format: int32
      example: 10
    Litera:
      description: Литера класса (А-Я за исключением "Ъ" и "Ь")
      type: string
      example: "Б"
    FullNameDto:
      type: object
      description: ДТО ФИО
      properties:
        name:
          type: string
          example: Иван
        surname:
          type: string
          example: Иванов
        patronymic:
          type: string
          example: Иванович
    BirthCertificateDto:
      type: object
      description: ДТО свидетельства о рождении
      properties:
        serial:
          $ref: '#/components/schemas/serial'
        number:
          $ref: '#/components/schemas/number'
    serial:
      type: string
      example: 1234
    number:
      type: string
      example: 567890
    PassportDto:
      type: object
      description: ДТО паспотра
      properties:
        serial:
          $ref: '#/components/schemas/serial'
        number:
          $ref: '#/components/schemas/number'
    SnilsDto:
      type: object
      description: ДТО СНИЛСа
      properties:
        numberView:
          type: string
          example: 1234567890
    StudentDto:
      description: ДТО студента
      type: object
      properties:
        id:
          $ref: '#/components/schemas/Id'
        name:
          type: string
          example: Ivan
        snils:
          $ref: '#/components/schemas/SnilsDto'
        birthCertificate:
          $ref: '#/components/schemas/BirthCertificateDto'
        passport:
          $ref: '#/components/schemas/PassportDto'
        birthday:
          $ref: '#/components/schemas/Date'
    StudentEntity:
      type: object
      description: сущность студента, которая будет сохраняться в базу
      properties:
        id:
          $ref: '#/components/schemas/Id'
        fullName:
          type: string
          example: Иванов Иван Иванович
        snils:
          type: string
          example: 1234567890
        birthCertificate:
          type: string
          example: 123-345-765-98
        passport:
          type: string
          example: 1234
        birthday:
          $ref: '#/components/schemas/Date'
    LoadedHomeworkDto:
      type: object
      description: ДТО решенного учеником домашнего задания
      properties:
        homeworkId:
          $ref: '#/components/schemas/Id'
        studentId:
          $ref: '#/components/schemas/Id'
        taskCompletionResult:
          type: string
          example: any text
        homeworkForClassId:
          $ref: '#/components/schemas/Id'
    AchievementForStudentDtoRequest:
      type: object
      description: ДТО отметки ученика
      properties:
        studentId:
          $ref: '#/components/schemas/Id'
        discipline:
          $ref: '#/components/schemas/Discipline'
        achievement:
          type: string
          example: 5
        dateOfLesson:
          $ref: '#/components/schemas/Date'
    TeacherDto:
      type: object
      description: ДТО учителя
      properties:
        standingYears:
          $ref: '#/components/schemas/StandingYears'
        fullName:
          $ref: '#/components/schemas/FullNameDto'
        passport:
          $ref: '#/components/schemas/PassportDto'
        snils:
          $ref: '#/components/schemas/SnilsDto'
        active:
          type: boolean
    AddJournalByDisciplineForStudentRequestDto:
      type: object
      description: ДТО журнала ученика по конкретному предмету
      properties:
        studentId:
          $ref: '#/components/schemas/Id'
        discipline:
          $ref: '#/components/schemas/Discipline'
    AllDisciplinesOfStudentResponseDto:
      type: object
      description: ДТО всех дисциплин
      properties:
        disciplinesOfStudent:
          type: array
          description: список дисциплин
          items:
            $ref: '#/components/schemas/Id'
    Discipline:
      type: string
      example: Английский язык
    AchievementOfStudentResponseDto:
      type: object
      description: ДТО отметки за урок
      properties:
        dateOfLesson:
          $ref: '#/components/schemas/Date'
        achievement:
          type: string
          example: 5
    AllAchievementsOfStudentByDisciplineResponseDto:
      type: object
      description: ДТО общей успеваемости ученика
      properties:
        achievements:
          type: array
          items:
            $ref: '#/components/schemas/AchievementOfStudentResponseDto'
    ScheduleForDateDTO:
      type: object
      description: ДТО расписания всех классов на день
      properties:
        schoolDayForClassDTOList:
          type: array
          items:
            $ref: '#/components/schemas/SchoolDayForClassDTO'
    SchoolDayForClassDTO:
      type: object
      description: Расписание уроков для класса на день
      properties:
        localDate:
          $ref: '#/components/schemas/Date'
        schoolClassId:
          $ref: '#/components/schemas/Id'
        lessons:
          type: array
          items:
            $ref: '#/components/schemas/LessonInScheduleDTO'
    LessonInScheduleDTO:
      type: object
      description: ДТО урока в расписании
      properties:
        lessonNumber:
          type: integer
          format: int32
          example: 3
        discipline:
          $ref: '#/components/schemas/Discipline'
        teacherId:
          $ref: '#/components/schemas/Id'
    CancelLessonForClassDTO:
      type: object
      description: ДТО для отмены занятия
      properties:
        schoolClassId:
          $ref: '#/components/schemas/Id'
        schoolDate:
          $ref: '#/components/schemas/Date'
        lessonNumber:
          type: integer
          format: int32
          example: 2
    StandingYears:
      type: integer
      format: int32
      example: 10
    Date:
      type: string
      format: date
      example: 2022-09-15
    HomeworkForClassDto:
      type: object
      description: ДТО домашнего задания для класса
      properties:
        id:
          $ref: '#/components/schemas/Id'
        discipline:
          type: string
          enum:
            - RUSSIAN_LANGUAGE
            - LITERATURE
            - RUSSIAN_LANGUAGE_AND_LITERATURE
            - ENGLISH
            - DEUTSCH
            - FRENCH
            - MATHS
            - ALGEBRA
            - GEOMETRY
            - COMPUTING
            - PHYSICS
            - CHEMISTRY
            - BIOLOGY
            - HISTORY
            - SOCIAL_SCIENCE
            - GEOGRAPHY
            - PHYSICAL_EDUCATION
            - MUSIC
            - DRAWING
            - TECHNOLOGY
          example: MUSIC
        task:
          type: string
          example: Do some task
        schoolClassId:
          $ref: '#/components/schemas/Id'
        date:
          $ref: '#/components/schemas/Date'
    PutLessonDTO:
      type: object
      properties:
        schoolDate:
          $ref: '#/components/schemas/Date'
        lesson:
          $ref: '#/components/schemas/LessonInScheduleDTO'
        schoolClassId:
          $ref: '#/components/schemas/Id'
    Problem:
      type: object
      properties:
        type:
          type: string
          format: uri
          description: |
            A relative URI reference that uniquely identifies the problem type.
          default: 'about:blank'
          example: '/problem/internal-server-error'
        title:
          type: string
          description: |
            title of the problem
          example: Internal server error
        status:
          type: integer
          format: int32
          description: |
            The HTTP status of the problem.
          minimum: 100
          maximum: 599
          example: 404
        detail:
          type: string
          description: |
            Detail of the problem
          example: Save data error